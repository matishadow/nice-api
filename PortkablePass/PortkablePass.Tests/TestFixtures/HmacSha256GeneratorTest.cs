using System;
using Moq;
using NUnit.Framework;
using PortkablePass.Cryptography;
using PortkablePass.Interfaces.Cryptography;
using PortkablePass.Interfaces.Encoding;
using PortkablePass.Tests.Mocks;

namespace PortkablePass.Tests.TestFixtures
{
    [TestFixture]
    public class HmacSha256GeneratorTest
    {
        private IHmacSha256Generator generator;

        [SetUp]
        public void SetUp()
        {
            Mock<IUtf8Converter> mockUtf8Converter = Uft8ConverterMockCreator.CreateUtf8Mock();

            generator = new HmacSha256Generator(mockUtf8Converter.Object);
        }

        [TestCase("aaa", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x8c, 0x38, 0xa1, 0xa9, 0xe8, 0xe8, 0x2a, 0xe0, 0xe4, 0xdf, 0xcf, 0xb8, 0x3a, 0xfe, 0x0f, 0x7f, 0xa4,
                0xdc, 0x53, 0xca, 0x19, 0xed, 0xca, 0x7d, 0x70, 0xcb, 0x25, 0x80, 0x16, 0xee, 0xda, 0x69
            })]
        [TestCase("ść", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x9e, 0x97, 0xa1, 0xc1, 0xd9, 0xa0, 0x58, 0x86, 0x03, 0x67, 0xd0, 0x34, 0x08, 0x13, 0x6c, 0x8a, 0xcd,
                0xc7, 0x44, 0xfa, 0x3a, 0x1e, 0x8e, 0x5c, 0x1b, 0x68, 0xfa, 0x6b, 0x3c, 0xd1, 0x42, 0x08
            })]
        [TestCase("", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x03, 0xfc, 0x58, 0x6e, 0xb5, 0xd8, 0x44, 0x3a, 0xc2, 0x86, 0x9d, 0x97, 0xc5, 0x8d, 0xd4, 0x78, 0x42,
                0x59, 0x24, 0xd8, 0x05, 0x60, 0xfd, 0x0c, 0x13, 0x2d, 0x0f, 0x5e, 0xe9, 0xf3, 0xc3, 0x11
            })]
        public byte[] TestComputeStringHash(string input, byte[] key)
        {
            return generator.GenerateHmacHash(input, key);
        }

        [TestCase(new byte[] {0x61, 0x61, 0x61},
            new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x8c, 0x38, 0xa1, 0xa9, 0xe8, 0xe8, 0x2a, 0xe0, 0xe4, 0xdf, 0xcf, 0xb8, 0x3a, 0xfe, 0x0f, 0x7f, 0xa4,
                0xdc, 0x53, 0xca, 0x19, 0xed, 0xca, 0x7d, 0x70, 0xcb, 0x25, 0x80, 0x16, 0xee, 0xda, 0x69
            })]
        [TestCase(new byte[] {0xc5, 0x9b, 0xc4, 0x87}, new byte[]
                {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x9e, 0x97, 0xa1, 0xc1, 0xd9, 0xa0, 0x58, 0x86, 0x03, 0x67, 0xd0, 0x34, 0x08, 0x13, 0x6c, 0x8a, 0xcd,
                0xc7, 0x44, 0xfa, 0x3a, 0x1e, 0x8e, 0x5c, 0x1b, 0x68, 0xfa, 0x6b, 0x3c, 0xd1, 0x42, 0x08
            })]
        [TestCase(new byte[] { }, new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x03, 0xfc, 0x58, 0x6e, 0xb5, 0xd8, 0x44, 0x3a, 0xc2, 0x86, 0x9d, 0x97, 0xc5, 0x8d, 0xd4, 0x78, 0x42,
                0x59, 0x24, 0xd8, 0x05, 0x60, 0xfd, 0x0c, 0x13, 0x2d, 0x0f, 0x5e, 0xe9, 0xf3, 0xc3, 0x11
            })]
        public byte[] TestComputeStringHash(byte[] input, byte[] key)
        {
            return generator.GenerateHmacHash(input, key);
        }
    }
}