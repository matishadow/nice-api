using System;
using Moq;
using NUnit.Framework;
using PortkablePass.Cryptography;
using PortkablePass.Interfaces.Cryptography;
using PortkablePass.Interfaces.Encoding;
using PortkablePass.Tests.Mocks;

namespace PortkablePass.Tests.TestFixtures
{
    [TestFixture]
    public class HmacSha512GeneratorTest
    {
        private IHmacSha512Generator generator;

        [SetUp]
        public void SetUp()
        {
            Mock<IUtf8Converter> mockUtf8Converter = Uft8ConverterMockCreator.CreateUtf8Mock();

            generator = new HmacSha512Generator(mockUtf8Converter.Object);
        }

        [TestCase("aaa", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x18, 0x56, 0x56, 0x3e, 0x85, 0x65, 0xa1, 0xd9, 0xa5, 0x3d, 0xea, 0xc9, 0xd0, 0x3b, 0x35, 0x68, 0x01,
                0x88, 0x3f, 0xc4, 0x6a, 0xfd, 0x23, 0xb6, 0x1e, 0x69, 0x43, 0x19, 0xc9, 0xc5, 0xfa, 0x8d, 0x12, 0xd2,
                0xc5, 0x4d, 0xba, 0x31, 0xef, 0xb3, 0x3c, 0x7b, 0x28, 0xe7, 0x77, 0xf7, 0x56, 0xf8, 0x4e, 0xd4, 0x00,
                0x32, 0x67, 0xc3, 0xe9, 0xca, 0xe1, 0xa4, 0xc1, 0x6f, 0x68, 0xac, 0x15, 0x3e
            })]
        [TestCase("ść", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x30, 0x2e, 0x53, 0xc8, 0xc2, 0x69, 0x5f, 0xab, 0x8b, 0x0e, 0x62, 0xc4, 0xb8, 0x91, 0x87, 0xa5, 0xdc,
                0xf1, 0x66, 0x94, 0x1d, 0x2e, 0x63, 0x6e, 0x68, 0xae, 0xe8, 0xac, 0x7d, 0xb1, 0x1a, 0x54, 0xc2, 0x8a,
                0x11, 0x1b, 0x02, 0xfa, 0x1c, 0x8c, 0x48, 0x20, 0x8b, 0xca, 0x5b, 0x1b, 0x4c, 0xf9, 0xd1, 0x76, 0x1e,
                0x63, 0xd3, 0x5f, 0xb6, 0x35, 0xea, 0xc8, 0x47, 0x87, 0x91, 0xa9, 0x32, 0x94
            })]
        [TestCase("", new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x96, 0xc4, 0x7a, 0x7a, 0x2a, 0x50, 0x66, 0xe7, 0xec, 0x9c, 0xee, 0x6e, 0x2c, 0xf1, 0xaa, 0x10, 0x05,
                0xd2, 0x99, 0x43, 0x4e, 0xf6, 0xec, 0xde, 0x9a, 0x2c, 0x0f, 0x5d, 0x39, 0x65, 0x30, 0x1c, 0x88, 0x0c,
                0x77, 0xc0, 0x08, 0xce, 0x94, 0xb2, 0x66, 0xa9, 0x9e, 0x12, 0x2e, 0x25, 0x06, 0xac, 0x3a, 0xb7, 0xbb,
                0xcc, 0x15, 0xcd, 0x9a, 0x24, 0x05, 0x1c, 0x0a, 0x76, 0x1f, 0x3c, 0xb1, 0x2f
            })]
        public byte[] TestComputeStringHash(string input, byte[] key)
        {
            return generator.GenerateHmacHash(input, key);
        }

        [TestCase(new byte[] {0x61, 0x61, 0x61},
            new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x18, 0x56, 0x56, 0x3e, 0x85, 0x65, 0xa1, 0xd9, 0xa5, 0x3d, 0xea, 0xc9, 0xd0, 0x3b, 0x35, 0x68, 0x01,
                0x88, 0x3f, 0xc4, 0x6a, 0xfd, 0x23, 0xb6, 0x1e, 0x69, 0x43, 0x19, 0xc9, 0xc5, 0xfa, 0x8d, 0x12, 0xd2,
                0xc5, 0x4d, 0xba, 0x31, 0xef, 0xb3, 0x3c, 0x7b, 0x28, 0xe7, 0x77, 0xf7, 0x56, 0xf8, 0x4e, 0xd4, 0x00,
                0x32, 0x67, 0xc3, 0xe9, 0xca, 0xe1, 0xa4, 0xc1, 0x6f, 0x68, 0xac, 0x15, 0x3e
            })]
        [TestCase(new byte[] {0xc5, 0x9b, 0xc4, 0x87}, new byte[]
                {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x30, 0x2e, 0x53, 0xc8, 0xc2, 0x69, 0x5f, 0xab, 0x8b, 0x0e, 0x62, 0xc4, 0xb8, 0x91, 0x87, 0xa5, 0xdc,
                0xf1, 0x66, 0x94, 0x1d, 0x2e, 0x63, 0x6e, 0x68, 0xae, 0xe8, 0xac, 0x7d, 0xb1, 0x1a, 0x54, 0xc2, 0x8a,
                0x11, 0x1b, 0x02, 0xfa, 0x1c, 0x8c, 0x48, 0x20, 0x8b, 0xca, 0x5b, 0x1b, 0x4c, 0xf9, 0xd1, 0x76, 0x1e,
                0x63, 0xd3, 0x5f, 0xb6, 0x35, 0xea, 0xc8, 0x47, 0x87, 0x91, 0xa9, 0x32, 0x94
            })]
        [TestCase(new byte[] { }, new byte[] {0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x21, 0xde, 0xad, 0xbe, 0xef},
            ExpectedResult = new byte[]
            {
                0x96, 0xc4, 0x7a, 0x7a, 0x2a, 0x50, 0x66, 0xe7, 0xec, 0x9c, 0xee, 0x6e, 0x2c, 0xf1, 0xaa, 0x10, 0x05,
                0xd2, 0x99, 0x43, 0x4e, 0xf6, 0xec, 0xde, 0x9a, 0x2c, 0x0f, 0x5d, 0x39, 0x65, 0x30, 0x1c, 0x88, 0x0c,
                0x77, 0xc0, 0x08, 0xce, 0x94, 0xb2, 0x66, 0xa9, 0x9e, 0x12, 0x2e, 0x25, 0x06, 0xac, 0x3a, 0xb7, 0xbb,
                0xcc, 0x15, 0xcd, 0x9a, 0x24, 0x05, 0x1c, 0x0a, 0x76, 0x1f, 0x3c, 0xb1, 0x2f
            })]
        public byte[] TestComputeStringHash(byte[] input, byte[] key)
        {
            return generator.GenerateHmacHash(input, key);
        }
    }
}